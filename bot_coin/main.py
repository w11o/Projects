from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import random
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, WebAppData, ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram import F
from aiogram.filters import Filter
import types
from typing import Union, Dict, Any

API_TOKEN = ''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
kb_builder = ReplyKeyboardBuilder()

web_app_button = KeyboardButton(
    text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
    web_app=WebAppInfo(url='https://w11o.github.io/test/')
)

kb_builder.row(web_app_button, width=1)

keyboard_app: ReplyKeyboardMarkup = kb_builder.as_markup(
    resize_keyboard=True,
    one_time_keyboard=True
)


def draw_hexagram(hexagram):
    hexagram_lines = []
    for line in hexagram:
        if line == 1:
            hexagram_lines.append("‚Äî‚Äî")  # –¶–µ–ª–∞—è –ª–∏–Ω–∏—è
        else:
            hexagram_lines.append("‚Äî ‚Äî")  # –ü—Ä–µ—Ä–≤–∞–Ω–Ω–∞—è –ª–∏–Ω–∏—è
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—É —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    return "\n".join(hexagram_lines)
hexagram = [1, 0, 1, 1, 0, 1]
hexagram_drawn = draw_hexagram(hexagram)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def send_welcome(message: Message):
        await message.reply(
        """<b>–ü—Ä–∏–≤–µ—Ç, <i>–¥—Ä—É–∂–∏—â–µ!</i> üåü</b>
        
        –Ø ‚Äî <b>–±–æ—Ç –¥–ª—è –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã</b>, –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä. üìç
        
        –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É, –∏ —è –ø–æ–∫–∞–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

        <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
        <i>/flip</i> ‚Äî —á—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É
        <i>/hex</i> ‚Äî —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—É
        <i>/start</i> ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è —Ç–µ–±—è 24/7! üí™""",
        parse_mode=ParseMode.HTML
    )
        await bot.send_photo(
        message.chat.id,
        "https://anashina.com/wp-content/uploads/2019/03/Zhou-yi.jpg",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        caption="–ö–∞–Ω–æ–Ω –ü–µ—Ä–µ–º–µ–Ω (–ò-—Ü–∑–∏–Ω)"  # –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    )

        await message.answer(
            text='—ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            reply_markup=keyboard_app
            )
    

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
@dp.message(Command(commands=["flip"]))
async def flip_coin(message: Message):
    # –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞
    result = random.choice(['–û—Ä–µ–ª', '–†–µ—à–∫–∞'])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
    await message.reply(
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç–∫–∏:</b>\n\n<b>{result}</b>",

    )

 
open_menu_button = InlineKeyboardButton(
    text='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é',
    callback_data='open_menu_button_pressed'
)


@dp.callback_query(F.data == 'open_menu_button_pressed')
async def open_menu_button_press(callback: CallbackQuery):
    await callback.message.edit_text(
        text= """<b>–ü—Ä–∏–≤–µ—Ç, <i>–¥—Ä—É–∂–∏—â–µ!</i> üåü</b>
        
        –Ø ‚Äî <b>–±–æ—Ç –¥–ª—è –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã</b>, –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä. üìç
        
        –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É, –∏ —è –ø–æ–∫–∞–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

        <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
        <i>/flip</i> ‚Äî —á—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É
        <i>/hex</i> ‚Äî —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –≥–µ–∫—Å–∞–≥—Ä–∞–º–º—É
        <i>/start</i> ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        –Ø —Ä–∞–±–æ—Ç–∞—é –¥–ª—è —Ç–µ–±—è 24/7! üí™""",
        parse_mode=ParseMode.HTML,
        reply_markup=callback.message.reply_markup
    )

    
keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[open_menu_button]]
)



@dp.message(Command(commands=["hex"]))
async def send_echo(message: Message):
        await message.reply(
        f"<pre>{hexagram_drawn}</pre>",
        parse_mode=ParseMode.HTML
    )



@dp.message(F.content_type == ContentType.WEB_APP_DATA)
async def handle_web_app_data(message: Message):
    
    print(message.web_app_data)
    print(message.from_user.id)
    print(message.from_user.first_name)
    print(message.from_user.last_name)
    print(message.from_user.username)
    print(message.from_user.language_code)
    await message.answer("Received web app data")




@dp.message()
async def send_echo(message: Message):
        print(f'{message.from_user.id}: {message.text}')
        await message.reply(
        "–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!", reply_markup=keyboard)






if __name__ == '__main__':
    dp.run_polling(bot)

